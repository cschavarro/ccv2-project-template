# Import config properties into impex macros
UPDATE GenericItem[processor=de.hybris.platform.commerceservices.impex.impl.ConfigPropertyImportProcessor];pk[unique=true]
$sessionLanguage=$config-sanecleanup.jobs.sessionlanguage

# @readme ProcessTaskLog
# We recommend customer to  BusinessProcess cleanup, which will eventually take care of TaskLogs cleanup.
# There might be the few scenarios for ProcessTaskLog cleanup:
# 1. The customer wants to keep the  BusinessProcess for reporting, although we don't recommend it.
# 1. The customer might be using the custom task without any business process.
# -- Query tested with MS SQL
# -- Adjust the date calculation for
# -- other database types
# SELECT
#   COUNT({l:pk}) AS "total",
#   MIN({l:modifiedtime}) AS "oldest",
#   MAX({l:modifiedtime}) AS "newest"
# FROM
#   {ProcessTaskLog AS l}
# WHERE
#   {l:creationTime} < DATEADD(
#     month,
#     -2,
#     GETUTCDATE()
#   )
INSERT_UPDATE Script; code[unique=true]; description[default = $sessionLanguage]; content; active[default=true]
;directCleanupProcessTaskLogScript;"Delete ProcessTaskLog" ;"
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery
import de.hybris.platform.util.persistence.PersistenceUtils

import java.time.ZonedDateTime
import java.time.Instant
import java.time.ZoneId
import java.time.temporal.ChronoUnit

def fss = spring.getBean('flexibleSearchService')
def ms = spring.getBean('modelService')

PersistenceUtils.doWithSLDPersistence({ ->
// TODO: adjust retention period
    def retention = Date.from(ZonedDateTime.now().minus(3, ChronoUnit.MONTHS).toInstant())
    def processTaskLogQuery = new FlexibleSearchQuery('SELECT {pk} FROM {ProcessTaskLog} WHERE {creationTime} < ?CALC_RETENTION_TIME');
    processTaskLogQuery.addQueryParameter('CALC_RETENTION_TIME', retention)
    processTaskLogQuery.setCount(10000); // TODO: adjust total count
    def processTaskLogs = fss.search(processTaskLogQuery).result
// out.println('ProcessTaskLog count: ' + processTaskLogs.size())
    if (processTaskLogs.size() > 0) {
        // out.println('Deleting ProcessTaskLog: ' + processTaskLogs.size())
        def counter
        try { // try bulk remove
            ms.removeAll(processTaskLogs)
            counter = processTaskLogs.size()
            processTaskLogs.each {
                ms.detach(it)
            }

        } catch (Exception bulkEx) { // if exception do individual remove
            // out.println('Exception: ' + bulkEx.getMessage())
            counter = 0
            for (taskLog in processTaskLogs) {
                try {
                    ms.remove(taskLog)
                    ms.detach(taskLog)
                    counter++
                    // out.println(counter + ' | Deleted - ProcessTaskLog: ' + taskLog?.pk + ' - ' + taskLog?.actionId + ' - ' + taskLog?.process)
                } catch (Exception indEx) {
                    // out.println('Exception: ' + indEx.getMessage())
                }
            }
        }
        // out.println('Deleted ProcessTaskLog: ' + counter)
        // processTaskLogQuery.setCount(-1);
        // processTaskLogs = fss.search(processTaskLogQuery).result
        // return [deleted: counter, remaining: processTaskLogs.size()]
        return [deleted: counter]

    } else {
        // out.println('NO ProcessTaskLog to delete.')
        return [deleted: 0, remaining: 0]
    }
});
";

INSERT_UPDATE ScriptingJob;code[unique = true];scriptURI
;directCleanupProcessTaskLogScriptJob;"model://directCleanupProcessTaskLogScript"

INSERT_UPDATE CronJob;code[unique=true]; job(code); sessionLanguage(isoCode)[default = $sessionLanguage];
;directCleanupProcessTaskLogCronjob;directCleanupProcessTaskLogScriptJob ;

# every 40 minutes
INSERT Trigger; cronjob(code)[unique = true]; cronExpression; active
;directCleanupProcessTaskLogCronjob ;0 0/40 * ? * * * ;true